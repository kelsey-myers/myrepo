{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar getClickAndPlaySegmentsEvents = function getClickAndPlaySegmentsEvents(animation) {\n  return {\n    onClick: function onClick() {\n      return animation.playSegments([0, 60], true);\n    }\n  };\n};\n\nvar getClickPlayEvents = function getClickPlayEvents(animation) {\n  return {\n    onClick: function onClick() {\n      animation.stop();\n      animation.play();\n    }\n  };\n};\n\nvar getHoverPlayAndStop = function getHoverPlayAndStop(animation) {\n  return {\n    onMouseEnter: function onMouseEnter() {\n      return animation.play();\n    },\n    onMouseLeave: function onMouseLeave() {\n      return animation.stop();\n    }\n  };\n};\n\nvar getHoverPlayBackwardsEvents = function getHoverPlayBackwardsEvents(animation) {\n  return {\n    onMouseEnter: function onMouseEnter() {\n      animation.setDirection(1);\n      animation.play();\n    },\n    onMouseLeave: function onMouseLeave() {\n      animation.setDirection(-1);\n      animation.play();\n    }\n  };\n};\n\nvar getClickAndPlayBackwardsEvents = function getClickAndPlayBackwardsEvents(animation, reverse) {\n  var directionMenu = 1; // EG CHECKBOX WHICH NEED TO BE CHECKED AS INITIAL STATE, LET'S PLAY THE ANIMATION ASAP AUTOMATICALLY\n\n  if (reverse) {\n    animation.setDirection(directionMenu);\n    animation.play();\n    directionMenu *= -1;\n  }\n\n  return {\n    onClick: function onClick() {\n      animation.setDirection(directionMenu);\n      animation.play();\n      directionMenu *= -1;\n    }\n  };\n};\n\nvar getEvents = function getEvents(_ref) {\n  var animation = _ref.animation,\n      reverse = _ref.reverse,\n      animEffect = _ref.animEffect;\n\n  if (animEffect === 'CLICK_PLAY_AND_SEGMENTS') {\n    return getClickAndPlaySegmentsEvents(animation);\n  }\n\n  if (animEffect === 'CLICK_PLAY') {\n    return getClickPlayEvents(animation);\n  }\n\n  if (animEffect === 'HOVER_PLAY_AND_STOP') {\n    return getHoverPlayAndStop(animation);\n  }\n\n  if (animEffect === 'HOVER_PLAY_AND_BACKWARDS') {\n    return getHoverPlayBackwardsEvents(animation);\n  }\n\n  if (animEffect === 'CLICK_PLAY_AND_BACKWARDS') {\n    return getClickAndPlayBackwardsEvents(animation, reverse);\n  }\n\n  return getClickPlayEvents(animation);\n};\n\nvar _default = getEvents;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}